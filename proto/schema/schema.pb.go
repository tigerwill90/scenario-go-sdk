// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: proto/schema/schema.proto

package schema

import (
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Attribute type is used to bound allowed type and provide
// interoperability between programming language.
type AttributeType int32

const (
	// basic
	AttributeType_FLOAT  AttributeType = 0
	AttributeType_INT    AttributeType = 1
	AttributeType_STRING AttributeType = 2
	AttributeType_BOOL   AttributeType = 3
	// repeated Any
	AttributeType_LIST_FLOAT  AttributeType = 4
	AttributeType_LIST_INT    AttributeType = 5
	AttributeType_LIST_STRING AttributeType = 6
	AttributeType_LIST_BOOL   AttributeType = 7
	// map<string,Any> && map<string, repeated Any>
	AttributeType_MAP_FLOAT       AttributeType = 8
	AttributeType_MAP_INT         AttributeType = 9
	AttributeType_MAP_STRING      AttributeType = 10
	AttributeType_MAP_BOOL        AttributeType = 11
	AttributeType_MAP_LIST_FLOAT  AttributeType = 12
	AttributeType_MAP_LIST_INT    AttributeType = 13
	AttributeType_MAP_LIST_STRING AttributeType = 14
	AttributeType_MAP_LIST_BOOL   AttributeType = 15
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0:  "FLOAT",
		1:  "INT",
		2:  "STRING",
		3:  "BOOL",
		4:  "LIST_FLOAT",
		5:  "LIST_INT",
		6:  "LIST_STRING",
		7:  "LIST_BOOL",
		8:  "MAP_FLOAT",
		9:  "MAP_INT",
		10: "MAP_STRING",
		11: "MAP_BOOL",
		12: "MAP_LIST_FLOAT",
		13: "MAP_LIST_INT",
		14: "MAP_LIST_STRING",
		15: "MAP_LIST_BOOL",
	}
	AttributeType_value = map[string]int32{
		"FLOAT":           0,
		"INT":             1,
		"STRING":          2,
		"BOOL":            3,
		"LIST_FLOAT":      4,
		"LIST_INT":        5,
		"LIST_STRING":     6,
		"LIST_BOOL":       7,
		"MAP_FLOAT":       8,
		"MAP_INT":         9,
		"MAP_STRING":      10,
		"MAP_BOOL":        11,
		"MAP_LIST_FLOAT":  12,
		"MAP_LIST_INT":    13,
		"MAP_LIST_STRING": 14,
		"MAP_LIST_BOOL":   15,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_schema_schema_proto_enumTypes[0].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_proto_schema_schema_proto_enumTypes[0]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeType.Descriptor instead.
func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{0}
}

type Diagnostic_Severity int32

const (
	Diagnostic_DIAG_INVALID Diagnostic_Severity = 0
	Diagnostic_DIAG_ERROR   Diagnostic_Severity = 1
	Diagnostic_DIAG_WARNING Diagnostic_Severity = 2
)

// Enum value maps for Diagnostic_Severity.
var (
	Diagnostic_Severity_name = map[int32]string{
		0: "DIAG_INVALID",
		1: "DIAG_ERROR",
		2: "DIAG_WARNING",
	}
	Diagnostic_Severity_value = map[string]int32{
		"DIAG_INVALID": 0,
		"DIAG_ERROR":   1,
		"DIAG_WARNING": 2,
	}
)

func (x Diagnostic_Severity) Enum() *Diagnostic_Severity {
	p := new(Diagnostic_Severity)
	*p = x
	return p
}

func (x Diagnostic_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Diagnostic_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_schema_schema_proto_enumTypes[1].Descriptor()
}

func (Diagnostic_Severity) Type() protoreflect.EnumType {
	return &file_proto_schema_schema_proto_enumTypes[1]
}

func (x Diagnostic_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Diagnostic_Severity.Descriptor instead.
func (Diagnostic_Severity) EnumDescriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{3, 0}
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// plugin schema version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// top level block
	Block *Schema_Block `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Schema) GetBlock() *Schema_Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// plugin schema version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// top level block
	Block *Config_Block `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Config) GetBlock() *Config_Block {
	if x != nil {
		return x.Block
	}
	return nil
}

// Range is a set of character between two positions in a file
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string     `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Start    *Range_Pos `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End      *Range_Pos `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Range) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Range) GetStart() *Range_Pos {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Range) GetEnd() *Range_Pos {
	if x != nil {
		return x.End
	}
	return nil
}

// Diagnostic give meaningful information about config validation error
type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity Diagnostic_Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=schema.Diagnostic_Severity" json:"severity,omitempty"`
	Summary  string              `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Detail   string              `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	Subject  *Range              `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Context  *Range              `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Diagnostic) GetSeverity() Diagnostic_Severity {
	if x != nil {
		return x.Severity
	}
	return Diagnostic_DIAG_INVALID
}

func (x *Diagnostic) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Diagnostic) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Diagnostic) GetSubject() *Range {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Diagnostic) GetContext() *Range {
	if x != nil {
		return x.Context
	}
	return nil
}

type Schema_Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes   []*Schema_Attribute   `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
	NestedBlocks []*Schema_NestedBlock `protobuf:"bytes,2,rep,name=nested_blocks,json=nestedBlocks,proto3" json:"nested_blocks,omitempty"`
}

func (x *Schema_Block) Reset() {
	*x = Schema_Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_Block) ProtoMessage() {}

func (x *Schema_Block) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_Block.ProtoReflect.Descriptor instead.
func (*Schema_Block) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Schema_Block) GetAttributes() []*Schema_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Schema_Block) GetNestedBlocks() []*Schema_NestedBlock {
	if x != nil {
		return x.NestedBlocks
	}
	return nil
}

type Schema_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        AttributeType `protobuf:"varint,2,opt,name=type,proto3,enum=schema.AttributeType" json:"type,omitempty"`
	Description string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Required    bool          `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	Deprecated  bool          `protobuf:"varint,5,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	Sensitive   bool          `protobuf:"varint,6,opt,name=sensitive,proto3" json:"sensitive,omitempty"`
	IsMountable bool          `protobuf:"varint,7,opt,name=is_mountable,json=isMountable,proto3" json:"is_mountable,omitempty"`
	MountPoint  string        `protobuf:"bytes,8,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
}

func (x *Schema_Attribute) Reset() {
	*x = Schema_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_Attribute) ProtoMessage() {}

func (x *Schema_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_Attribute.ProtoReflect.Descriptor instead.
func (*Schema_Attribute) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Schema_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema_Attribute) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_FLOAT
}

func (x *Schema_Attribute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schema_Attribute) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Schema_Attribute) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Schema_Attribute) GetSensitive() bool {
	if x != nil {
		return x.Sensitive
	}
	return false
}

func (x *Schema_Attribute) GetIsMountable() bool {
	if x != nil {
		return x.IsMountable
	}
	return false
}

func (x *Schema_Attribute) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

type Schema_NestedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the name of the block.
	Type   string                      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Labels []*Schema_NestedBlock_Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// Dynamic blocks are a list of possible block schema for a nested block type. Only one schema will be
	// used per block. The key path is the ordered concatenation from the nested block type followed by all
	// label(s) (selector/one of allowed value) separated by a point.
	// It allow to load dynamically a block schema depending on the key path.
	// Example :
	// credentials <provider>[values_ranges:aws,gcp,azure] <method>[values_ranges:file,env] <id> {...} => key path = credentials.gcp.env.id
	DynamicBlocks map[string]*Schema_Block `protobuf:"bytes,3,rep,name=dynamic_blocks,json=dynamicBlocks,proto3" json:"dynamic_blocks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// negative number mean optional block type
	MinItems int64 `protobuf:"varint,4,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	// negative number mean no max boundary for the block type
	MaxItems int64 `protobuf:"varint,5,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
}

func (x *Schema_NestedBlock) Reset() {
	*x = Schema_NestedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_NestedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_NestedBlock) ProtoMessage() {}

func (x *Schema_NestedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_NestedBlock.ProtoReflect.Descriptor instead.
func (*Schema_NestedBlock) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Schema_NestedBlock) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Schema_NestedBlock) GetLabels() []*Schema_NestedBlock_Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Schema_NestedBlock) GetDynamicBlocks() map[string]*Schema_Block {
	if x != nil {
		return x.DynamicBlocks
	}
	return nil
}

func (x *Schema_NestedBlock) GetMinItems() int64 {
	if x != nil {
		return x.MinItems
	}
	return 0
}

func (x *Schema_NestedBlock) GetMaxItems() int64 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

type Schema_NestedBlock_Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Labels selector is the default label selector for a nested block type when their is no value ranges.
	// It's also help to provide meaningful diagnostics.
	Selector string `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	// Label value can be used to bound labels values and select the right dynamic block
	// when multiple block schema can be used for a nested block type. An empty array is used
	// when any values are allowed.
	BoundedValue []string `protobuf:"bytes,2,rep,name=bounded_value,json=boundedValue,proto3" json:"bounded_value,omitempty"`
}

func (x *Schema_NestedBlock_Label) Reset() {
	*x = Schema_NestedBlock_Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_NestedBlock_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_NestedBlock_Label) ProtoMessage() {}

func (x *Schema_NestedBlock_Label) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_NestedBlock_Label.ProtoReflect.Descriptor instead.
func (*Schema_NestedBlock_Label) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Schema_NestedBlock_Label) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *Schema_NestedBlock_Label) GetBoundedValue() []string {
	if x != nil {
		return x.BoundedValue
	}
	return nil
}

type Config_Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes   []*Config_Attribute   `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
	NestedBlocks []*Config_NestedBlock `protobuf:"bytes,2,rep,name=nested_blocks,json=nestedBlocks,proto3" json:"nested_blocks,omitempty"`
}

func (x *Config_Block) Reset() {
	*x = Config_Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Block) ProtoMessage() {}

func (x *Config_Block) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Block.ProtoReflect.Descriptor instead.
func (*Config_Block) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Config_Block) GetAttributes() []*Config_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Config_Block) GetNestedBlocks() []*Config_NestedBlock {
	if x != nil {
		return x.NestedBlocks
	}
	return nil
}

type Config_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type      AttributeType `protobuf:"varint,2,opt,name=type,proto3,enum=schema.AttributeType" json:"type,omitempty"`
	Value     *any.Any      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ExprRange *Range        `protobuf:"bytes,4,opt,name=expr_range,json=exprRange,proto3" json:"expr_range,omitempty"`
	NameRange *Range        `protobuf:"bytes,5,opt,name=name_range,json=nameRange,proto3" json:"name_range,omitempty"`
	Range     *Range        `protobuf:"bytes,6,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Config_Attribute) Reset() {
	*x = Config_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Attribute) ProtoMessage() {}

func (x *Config_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Attribute.ProtoReflect.Descriptor instead.
func (*Config_Attribute) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Config_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config_Attribute) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_FLOAT
}

func (x *Config_Attribute) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Config_Attribute) GetExprRange() *Range {
	if x != nil {
		return x.ExprRange
	}
	return nil
}

func (x *Config_Attribute) GetNameRange() *Range {
	if x != nil {
		return x.NameRange
	}
	return nil
}

func (x *Config_Attribute) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type Config_NestedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string                      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Labels    []*Config_NestedBlock_Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	Block     *Config_Block               `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	DefRange  *Range                      `protobuf:"bytes,4,opt,name=def_range,json=defRange,proto3" json:"def_range,omitempty"`
	TypeRange *Range                      `protobuf:"bytes,5,opt,name=type_range,json=typeRange,proto3" json:"type_range,omitempty"`
}

func (x *Config_NestedBlock) Reset() {
	*x = Config_NestedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_NestedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_NestedBlock) ProtoMessage() {}

func (x *Config_NestedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_NestedBlock.ProtoReflect.Descriptor instead.
func (*Config_NestedBlock) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Config_NestedBlock) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Config_NestedBlock) GetLabels() []*Config_NestedBlock_Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Config_NestedBlock) GetBlock() *Config_Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Config_NestedBlock) GetDefRange() *Range {
	if x != nil {
		return x.DefRange
	}
	return nil
}

func (x *Config_NestedBlock) GetTypeRange() *Range {
	if x != nil {
		return x.TypeRange
	}
	return nil
}

type Config_NestedBlock_Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector string `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Range    *Range `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Config_NestedBlock_Label) Reset() {
	*x = Config_NestedBlock_Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_NestedBlock_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_NestedBlock_Label) ProtoMessage() {}

func (x *Config_NestedBlock_Label) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_NestedBlock_Label.ProtoReflect.Descriptor instead.
func (*Config_NestedBlock_Label) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *Config_NestedBlock_Label) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *Config_NestedBlock_Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Config_NestedBlock_Label) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type Range_Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int64 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Byte   int64 `protobuf:"varint,3,opt,name=byte,proto3" json:"byte,omitempty"`
}

func (x *Range_Pos) Reset() {
	*x = Range_Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_schema_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range_Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range_Pos) ProtoMessage() {}

func (x *Range_Pos) ProtoReflect() protoreflect.Message {
	mi := &file_proto_schema_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range_Pos.ProtoReflect.Descriptor instead.
func (*Range_Pos) Descriptor() ([]byte, []int) {
	return file_proto_schema_schema_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Range_Pos) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Range_Pos) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Range_Pos) GetByte() int64 {
	if x != nil {
		return x.Byte
	}
	return 0
}

var File_proto_schema_schema_proto protoreflect.FileDescriptor

var file_proto_schema_schema_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0,
	0x06, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a,
	0x82, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x8a, 0x02, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x1a, 0x8d, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x54, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a,
	0x48, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x56, 0x0a, 0x12, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x91, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x1a, 0x82, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0xf7, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x09, 0x65, 0x78, 0x70, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x1a, 0xc1, 0x02, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x09, 0x64,
	0x65, 0x66, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x64,
	0x65, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x5e, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0x45, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x79, 0x74, 0x65,
	0x22, 0x89, 0x02, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x37, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x0a, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x41, 0x47,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49,
	0x41, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49,
	0x41, 0x47, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0xff, 0x01, 0x0a,
	0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x50, 0x5f, 0x46, 0x4c,
	0x4f, 0x41, 0x54, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x50, 0x5f, 0x49, 0x4e, 0x54,
	0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x50, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x41, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x0f, 0x42, 0x0e,
	0x5a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_schema_schema_proto_rawDescOnce sync.Once
	file_proto_schema_schema_proto_rawDescData = file_proto_schema_schema_proto_rawDesc
)

func file_proto_schema_schema_proto_rawDescGZIP() []byte {
	file_proto_schema_schema_proto_rawDescOnce.Do(func() {
		file_proto_schema_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_schema_schema_proto_rawDescData)
	})
	return file_proto_schema_schema_proto_rawDescData
}

var file_proto_schema_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_schema_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_schema_schema_proto_goTypes = []interface{}{
	(AttributeType)(0),               // 0: schema.AttributeType
	(Diagnostic_Severity)(0),         // 1: schema.Diagnostic.Severity
	(*Schema)(nil),                   // 2: schema.Schema
	(*Config)(nil),                   // 3: schema.Config
	(*Range)(nil),                    // 4: schema.Range
	(*Diagnostic)(nil),               // 5: schema.Diagnostic
	(*Schema_Block)(nil),             // 6: schema.Schema.Block
	(*Schema_Attribute)(nil),         // 7: schema.Schema.Attribute
	(*Schema_NestedBlock)(nil),       // 8: schema.Schema.NestedBlock
	(*Schema_NestedBlock_Label)(nil), // 9: schema.Schema.NestedBlock.Label
	nil,                              // 10: schema.Schema.NestedBlock.DynamicBlocksEntry
	(*Config_Block)(nil),             // 11: schema.Config.Block
	(*Config_Attribute)(nil),         // 12: schema.Config.Attribute
	(*Config_NestedBlock)(nil),       // 13: schema.Config.NestedBlock
	(*Config_NestedBlock_Label)(nil), // 14: schema.Config.NestedBlock.Label
	(*Range_Pos)(nil),                // 15: schema.Range.Pos
	(*any.Any)(nil),                  // 16: google.protobuf.Any
}
var file_proto_schema_schema_proto_depIdxs = []int32{
	6,  // 0: schema.Schema.block:type_name -> schema.Schema.Block
	11, // 1: schema.Config.block:type_name -> schema.Config.Block
	15, // 2: schema.Range.start:type_name -> schema.Range.Pos
	15, // 3: schema.Range.end:type_name -> schema.Range.Pos
	1,  // 4: schema.Diagnostic.severity:type_name -> schema.Diagnostic.Severity
	4,  // 5: schema.Diagnostic.subject:type_name -> schema.Range
	4,  // 6: schema.Diagnostic.context:type_name -> schema.Range
	7,  // 7: schema.Schema.Block.attributes:type_name -> schema.Schema.Attribute
	8,  // 8: schema.Schema.Block.nested_blocks:type_name -> schema.Schema.NestedBlock
	0,  // 9: schema.Schema.Attribute.type:type_name -> schema.AttributeType
	9,  // 10: schema.Schema.NestedBlock.labels:type_name -> schema.Schema.NestedBlock.Label
	10, // 11: schema.Schema.NestedBlock.dynamic_blocks:type_name -> schema.Schema.NestedBlock.DynamicBlocksEntry
	6,  // 12: schema.Schema.NestedBlock.DynamicBlocksEntry.value:type_name -> schema.Schema.Block
	12, // 13: schema.Config.Block.attributes:type_name -> schema.Config.Attribute
	13, // 14: schema.Config.Block.nested_blocks:type_name -> schema.Config.NestedBlock
	0,  // 15: schema.Config.Attribute.type:type_name -> schema.AttributeType
	16, // 16: schema.Config.Attribute.value:type_name -> google.protobuf.Any
	4,  // 17: schema.Config.Attribute.expr_range:type_name -> schema.Range
	4,  // 18: schema.Config.Attribute.name_range:type_name -> schema.Range
	4,  // 19: schema.Config.Attribute.range:type_name -> schema.Range
	14, // 20: schema.Config.NestedBlock.labels:type_name -> schema.Config.NestedBlock.Label
	11, // 21: schema.Config.NestedBlock.block:type_name -> schema.Config.Block
	4,  // 22: schema.Config.NestedBlock.def_range:type_name -> schema.Range
	4,  // 23: schema.Config.NestedBlock.type_range:type_name -> schema.Range
	4,  // 24: schema.Config.NestedBlock.Label.range:type_name -> schema.Range
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_schema_schema_proto_init() }
func file_proto_schema_schema_proto_init() {
	if File_proto_schema_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_schema_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_NestedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_NestedBlock_Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_NestedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_NestedBlock_Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_schema_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range_Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_schema_schema_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_schema_schema_proto_goTypes,
		DependencyIndexes: file_proto_schema_schema_proto_depIdxs,
		EnumInfos:         file_proto_schema_schema_proto_enumTypes,
		MessageInfos:      file_proto_schema_schema_proto_msgTypes,
	}.Build()
	File_proto_schema_schema_proto = out.File
	file_proto_schema_schema_proto_rawDesc = nil
	file_proto_schema_schema_proto_goTypes = nil
	file_proto_schema_schema_proto_depIdxs = nil
}
