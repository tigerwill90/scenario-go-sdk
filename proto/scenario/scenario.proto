syntax = "proto3";

package scenario;

option go_package = "proto/scenario";

message Scenario {
  // unique identifier for the scenario
  string uuid = 1;

  // friendly name for the scenario
  string name = 2;

  string created = 3;

  // digest of the scenario
  uint64 digest = 4;

  // actual hcl file
  bytes file = 5;

  // recovery time objective is the excepted time to recover a backup
  string rto = 6;

  // time after which we consider the scenario has failed
  string timeout = 7;

  // multiple path for a filter key
  message Paths {
    repeated string paths = 1;
  }

  // filter used for test case
  map<string, Paths> filter = 8;

  // docker image provided to create the test environment
  string env_image = 9;

  // docker image version provided to create the test environment
  string env_version = 10;

  // opaque config returned by the plugin after parsing the schema and validating the configuration
  bytes env_config = 11;

  // group of query to which compose a test case
  message TestCase {
    // operation to perform on a filtered file with the submitted config
    message Query {
      string op = 1;
      string variable = 2;
      string filter = 3;
      bytes config = 4;
    }

    // for_each operand can be use to process multiple nested query in a row
    message QueryGroup {
      string assert = 1;
      // query can be nested in order to compose expressive test from small operation
      repeated Query nested_queries = 2;
    }

    string description = 1;
    repeated QueryGroup query_groups = 2;
  }

  // all case and configuration
  repeated TestCase cases = 12;
}